// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
		return;
    }
	
	function boolean bit(int x, int n){
		return ~((x & twoToThe[n]) = 0);
	}
	
	function int multiplyByTwo(int x, int j) {
        var int sum, i;
        let sum = x;
        let i = 0;
        while ( i < j){
            let sum = sum + sum;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0){
			let x = -x;
        }
        return x;
    }
	
	 function int mod(int x, int j) {
        var int m;
        let m = x;
        while (m - j > 0){
            let m = m - j;
        }
        if (m = j){
            return 0;
        }
        return m;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, shiftedX, i;
		let shiftedX = x;
		let sum = 0;
		let i = 0;
		while (i < 16) { 
            if (Math.bit(y, i)){
			    let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
     function int divide(int x, int y) {
        var int xAbs;
        var int yAbs;

        let xAbs = Math.abs(x);
        let yAbs = Math.abs(y);

        if (yAbs > xAbs) {
            return 0;
        }

        if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
            return Math.divideHelper(xAbs, yAbs);
        }
        return -Math.divideHelper(xAbs, yAbs);
    }

    function int divideHelper(int xAbs, int yAbs) {
        
		var int temp;
		var int res;
        
        if ((yAbs > xAbs) | (yAbs < 0)) {
            return 0;
        }

        let res = Math.divideHelper(xAbs, yAbs + yAbs);
        if (res = 0) {
            return 1;
        }
        let temp = res * yAbs;
        if ((xAbs - (temp + temp)) < yAbs) {
            return res + res;
        } 
		else {
            return res + res + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j, approximate, approximateSquared;
		let y =0;
		let j = 7;
		while (~(j < 0)){
			let approximate = y + twoToThe[j];
			let approximateSquared = approximate * approximate;
			if (~(approximateSquared > x) & (approximateSquared > 0)) // HANDLES OVERFLOW
			{
				let y = approximate;
			}
			let j = j-1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b){
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b){
			return a;
		}
		return b;
    }
}
