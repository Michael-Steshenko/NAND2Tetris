// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
	field Array strChars;
    field int strLen;
    field int maxStrLen;
    
    /** constructs a new empty string with a maximum length of maxLength
    *  and initial length of 0. */
    constructor String new(int maxLength) {
        
        if(maxLength = 0){
           let maxLength = 1;   
        }

        let strLen = 0;
        let maxStrLen = maxLength;
        let strChars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do strChars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return strLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return strChars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let strChars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(strLen < maxStrLen){
            let strChars[strLen] = c;
            let strLen = strLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(strLen > 0){
            let strLen = strLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
    *  until a non-digit character is detected. */
    method int intValue() {
        
		var boolean isNegative;
		var int val;
		var int curIndex;

        let val = 0;

        if((strLen > 0) & (strChars[0] = 45)){
            let isNegative = true;
            let curIndex = 1;
        }else{
            let isNegative = false;
            let curIndex = 0;
        }

        while((curIndex < strLen) & String.isDigit(strChars[curIndex])){
            let val = (val * 10) + String.charToDigit(strChars[curIndex]);
            let curIndex = curIndex + 1;
        }

        if(isNegative){
            return -val;
        }
		else{
            return val;
        }
    }

    function boolean isDigit(char c){
        return ~(c < 48) & ~(c > 57);
    }

    function int charToDigit(char c){
        return c - 48;
    }

    function char digitToChar(int d){
        return d + 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let strLen = 0;

        if(val < 0){
            let val = -val;
            do appendChar(45);
        }

        do helper(val);

        return;
    }

    method void helper(int val){
        var int next;

        if(val < 10){
            do appendChar(String.digitToChar(val));
        }else{
            let next = val / 10;
            do helper(next);
            do appendChar(String.digitToChar(val - (next * 10)));
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}