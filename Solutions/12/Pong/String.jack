// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
	field Array characters;
    field int length, maxLength;
    
    /** constructs a new empty string with a maximum length of maxLength
    *  and initial length of 0. */
    constructor String new(int maxLen) {
        
		let length = 0;
        if(maxLen = 0){
           let maxLen = 1;   
        } 
        let maxLength = maxLen;
        let characters = Array.new(maxLength);
		
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do characters.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return characters[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let characters[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length < maxLength){
            let characters[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0){
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
    *  until a non-digit character is detected. */
    method int intValue() {
		var boolean neg;
		var int val;
		var int i;

        let val = 0;
		let neg = false;
		let i = 0;
        if(characters[0] = 45){
            let neg = true;
            let i = i + 1;
        }
        while((i < length) & String.isDigit(characters[i])){
            let val = (val * 10) + String.charToDigit(characters[i]);
            let i = i + 1;
        }
        if(neg){
            let val = -val;
        }
		return val;
    }

	/** Returns whether the character is a digit */
    function boolean isDigit(char c){
        return ~(c < 48) & ~(c > 57);
    }

	/** Translates a character to a digit */
    function int charToDigit(char c){
        return c - 48;
    }

	/** Translates a digit to a character */
    function char digitToChar(int d){
        return d + 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
	
        let length = 0;
        if(val < 0){
			do appendChar(45);
            let val = -val;
        }
        do recursiveTranslator(val);

        return;
    }

	/** Recursively translates a digit to a string.
	 *  The recursion base is the unit's digit, followed by increasing
	 *  powers of 10 */
    method void recursiveTranslator(int val){
        var int next;

        if(val < 10){
            do appendChar(String.digitToChar(val));
        }else{
            let next = val / 10;
            do recursiveTranslator(next);
            do appendChar(String.digitToChar(val - (next * 10)));
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}