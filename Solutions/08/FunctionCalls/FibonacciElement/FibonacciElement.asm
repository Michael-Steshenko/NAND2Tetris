@256
D=A
@SP
M=D
@Sys.init_call0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(Sys.init_call0)
(Main.fibonacci)
@0
D=A

@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP
M=M-1
A=M
D=M
@Y_LT_NEG0
D;JLT
//here if y>=0
@SP
A=M-1
D=M
@LT_TRUE0
D;JLT
//here iff x,y>=0
@SP
A=M
D=M
A=A-1
D=D-M
@LT_TRUE0
D;JGT //x,y>=0, x-y>0
@LT_FALSE0
0;JMP //x,y>=0, x-y<=0
(Y_LT_NEG0)
@SP
A=M-1
D=M //D holds value of x
@X_LT_NEG0
D;JLT
@LT_FALSE0 //here iff y<0, x>=0
0;JMP
(X_LT_NEG0) //here iff x,y<0
@SP
A=M
D=M
A=A-1
D=M-D //D holds the value of y-x
@LT_TRUE0
D;JLT //here iff x,y<0, y-x>=0
@LT_FALSE0
0;JMP
(LT_TRUE0)
@SP
A=M-1
M=-1
@LT_END0
0;JMP
(LT_FALSE0)
@SP
A=M-1
M=0
(LT_END0)
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JGT
D;JLT
@IF_FALSE
0;JMP
(IF_TRUE)
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@endFrame
M=D
@5
A=D-A
D=M
@retAddr
M=D
@ARG
D=M
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame
M=M-1
A=M
D=M
@THAT
M=D
@endFrame
M=M-1
A=M
D=M
@THIS
M=D
@endFrame
M=M-1
A=M
D=M
@ARG
M=D
@endFrame
M=M-1
A=M
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function END
(IF_FALSE)
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP //Start of a SUB command
M=M-1
A=M
D=M //D holds the value of Y
A=A-1
M=M-D
@Main.fibonacci_call1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci_call1)
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
@SP //Start of a SUB command
M=M-1
A=M
D=M //D holds the value of Y
A=A-1
M=M-D
@Main.fibonacci_call2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci_call2)
@SP //Start of an ADD command
M=M-1
A=M
D=M //D holds the value of Y
A=A-1
M=M+D
@LCL
D=M
@endFrame
M=D
@5
A=D-A
D=M
@retAddr
M=D
@ARG
D=M
@13
M=D
@SP
A=M-1
D=M
@13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame
M=M-1
A=M
D=M
@THAT
M=D
@endFrame
M=M-1
A=M
D=M
@THIS
M=D
@endFrame
M=M-1
A=M
D=M
@ARG
M=D
@endFrame
M=M-1
A=M
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// function END
(Sys.init)
@0
D=A

@4
D=A
@SP
A=M
M=D
@SP
M=M+1
@Main.fibonacci_call3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci_call3)
(WHILE)
@WHILE
0;JMP
